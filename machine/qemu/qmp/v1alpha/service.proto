// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) 2022, Unikraft GmbH and The KraftKit Authors.
// Licensed under the BSD-3-Clause License (the "License").
// You may not use this file except in compliance with the License.
syntax = "proto3";

package qmp.v1alpha;

import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";

import "machine/qemu/qmp/v1alpha/control.proto";
import "machine/qemu/qmp/v1alpha/greeting.proto";
import "machine/qemu/qmp/v1alpha/machine.proto";
import "machine/qemu/qmp/v1alpha/misc.proto";
import "machine/qemu/qmp/v1alpha/run_state.proto";

option go_package = "kraftkit.sh/machine/qemu/qmp/v1alpha;qmpv1alpha";

service QEMUMachineProtocol {
	// # QMP Connection Greeting
	//
	// This is a special method which does not have a send message as it its
	// response is received as soon as a connection is made to the remote
	// interface.
	//
	// Example:
	//
	// <- { "QMP": { "version": { "qemu": { "micro": 0, "minor": 2, "major": 5 },
	//                            "package": "Debian 1:5.2+dfsg-11+deb11u2" },
	//               "capabilities": [ "oob" ] } }
	rpc Greeting(google.protobuf.Empty) returns (GreetingResponse) {}

	// # Quit the emulator.
	//
	// Arguments: None.
	//
	// Example:
	//
	// -> { "execute": "quit" }
	// <- { "return": {} }
	rpc Quit(QuitRequest) returns (QuitResponse) {}

	// # Stop the emulator
	//
	// Arguments: None.
	//
	// Example:
	//
	// -> { "execute": "stop" }
	// <- { "return": {} }
	rpc Stop(StopRequest) returns (google.protobuf.Any) {}

	// # Resume guest VCPU execution.
	//
	// Since: 0.14
	//
	// Returns: If successful, nothing
	//
	// Notes: This command will succeed if the guest is currently running.  It
	//        will also succeed if the guest is in the "inmigrate" state; in
	//        this case, the effect of the command is to make sure the guest
	//        starts once migration finishes, removing the effect of the -S
	//        command line option if it was passed.
	//
	// Example:
	//
	// -> { "execute": "cont" }
	// <- { "return": {} }
	rpc Cont(ContRequest) returns (google.protobuf.Any) {}

	// # Perform a hard reset of a guest.
	//
	// Since: 0.14
	//
	// Example:
	//
	// -> { "execute": "system_reset" }
	// <- { "return": {} }
	rpc SystemReset(SystemResetRequest) returns (google.protobuf.Any) {}

	// # Requests that a guest perform a powerdown operation
	//
	// Since: 0.14
	//
	// Notes: A guest may or may not respond to this command.  This command
	//        returning does not indicate that a guest has accepted the request or
	//        that it has shut down.  Many guests will respond to this command by
	//        prompting the user in some way.
	//
	// Example:
	//
	// -> { "execute": "system_powerdown" }
	// <- { "return": {} }
	rpc SystemPowerdown(SystemPowerdownRequest) returns (google.protobuf.Any) {}

	// # Wake up guest from suspend.
	//
	// If the guest has wake-up from suspend support enabled
	// (wakeup-suspend-support flag from query-current-machine), wake-up guest
	// from suspend if the guest is in SUSPENDED state. Return an error otherwise.
	//
	// Since: 1.1
	//
	// Returns: nothing.
	//
	// Note: prior to 4.0, this command does nothing in case the guest isn't
	//       suspended.
	//
	// Example:
	//
	// -> { "execute": "system_wakeup" } <- { "return": {} }
	rpc SystemWakeup(SystemWakeupRequest) returns (google.protobuf.Any) {}

	// # Enable QMP capabilities.
	//
	// Arguments: None.
	//
	// Example:
	//
	// -> { "execute": "qmp_capabilities",
	//       "arguments: { "enable": [ "oob" ] } }
	// <- { "return": {} }
	//
	// Note: This command must be issued before issuing any other command.
	rpc Capabilities(CapabilitiesRequest) returns (CapabilitiesResponse) {}

	// # Show KVM information
	//
	// Return a json-object with the following information:
	//
	// - "enabled": true if KVM support is enabled, false otherwise (json-bool)
	// - "present": true if QEMU has KVM support, false otherwise (json-bool)
	//
	// Example:
	//
	// -> { "execute": "query-kvm" }
	// <- { "return": { "enabled": true, "present": true } }
	rpc QueryKvm(QueryKvmRequest) returns (QueryKvmResponse) {}

	// # Query the run status of all VCPUs
	//
	// Return a json-object with the following information
	//
	// - "running": true if the VM is running, or false if it is paused (json-bool)
	// - "singlestep": true if the VM is in single step mode,
	//                 false otherwise (json-bool)
	// - "status": one of the following values (json-string)
	//     "debug" - QEMU is running on a debugger
	//     "inmigrate" - guest is paused waiting for an incoming migration
	//     "internal-error" - An internal error that prevents further guest
	//     execution has occurred
	//     "io-error" - the last IOP has failed and the device is configured
	//     to pause on I/O errors
	//     "paused" - guest has been paused via the 'stop' command
	//     "postmigrate" - guest is paused following a successful 'migrate'
	//     "prelaunch" - QEMU was started with -S and guest has not started
	//     "finish-migrate" - guest is paused to finish the migration process
	//     "restore-vm" - guest is paused to restore VM state
	//     "running" - guest is actively running
	//     "save-vm" - guest is paused to save the VM state
	//     "shutdown" - guest is shut down (and -no-shutdown is in use)
	//     "watchdog" - the watchdog action is configured to pause and
	//      has been triggered
	//
	// Example:
	//
	// -> { "execute": "query-status" }
	// <- { "return": { "running": true, "singlestep": false, "status": "running" } }
	rpc QueryStatus(QueryStatusRequest) returns (QueryStatusResponse) {}
}
