name: Build unikernel images with Unikraft
description: Build, push and run unikernel images with Unikraft.
author: Unikraft

branding:
  icon: package
  color: blue

inputs:
  #
  # Global flags
  #
  loglevel:
    description: Log-level of the action
    required: false
    default: error
  
  #
  # Project flags
  #
  workdir:
    description: Path to the project directory.
    required: false
  kraftfile:
    description: Alternative path for the Kraftfile or inline-Kraftfile.
    required: false

  #
  # Build flags
  #
  arch:
    description: Architecture to build for.
    required: false
  plat:
    description: Platform to build for.
    required: false
  target:
    description: Name of the target to build for.
    required: false
  
  #
  # Running flags
  #
  execute:
    description: If to run the unikernel.
    required: false
    default: false
  timeout:
    description: Timeout for the unikernel.
    required: false

  #
  # Packaging flags
  #
  args:
    description: Arguments to pass to the unikernel.
    required: false
  rootfs:
    description: Set the root filesystem.  This can be an existing CPIO archive or a directory.
    required: false
  memory:
    description: Set the memory size. String of format "1M"/"1G"/"1K"
    required: false
  name:
    description: Set the name of the output.
    required: true
  output:
    description: Set the output path.
    required: false
  kconfig:
    description: Include all set KConfig with the output.
    required: false
  # If to push the output to a registry
  push:
    description: Push the output.
    required: false
    default: false

runs:
  # Use a composite type so we can execute a bash script before the invocation
  # of the container image.
  using: composite
  steps:
  - shell: bash
    run: ${{ github.action_path }}/tools/github-action/pre.sh
  - uses: docker://kraftkit.sh/github-action:v0
    # This is a bit of a hack, since we are using a composite-type, the actions
    # input are not passed when the container image is instantiated.  Instead,
    # we simply pass all inputs as environmental variables which are already
    # compatible with the action itself.
    env:
      INPUT_LOGLEVEL: ${{ inputs.loglevel }}
      INPUT_WORKDIR: ${{ inputs.workdir }}
      INPUT_KRAFTFILE: ${{ inputs.kraftfile }}
      INPUT_ARCH: ${{ inputs.arch }}
      INPUT_PLAT: ${{ inputs.plat }}
      INPUT_TARGET: ${{ inputs.target }}
      INPUT_EXECUTE: ${{ inputs.execute }}
      INPUT_TIMEOUT: ${{ inputs.timeout }}
      INPUT_ARGS: ${{ inputs.args }}
      INPUT_INITRD: ${{ inputs.initrd }}
      INPUT_MEMORY: ${{ inputs.memory }}
      INPUT_NAME: ${{ inputs.name }}
      INPUT_OUTPUT: ${{ inputs.output }}
      INPUT_KCONFIG: ${{ inputs.kconfig }}
      INPUT_PUSH: ${{ inputs.push }}
