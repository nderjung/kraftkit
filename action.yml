name: Build unikernel images with Unikraft
description: Build, push and run unikernel images with Unikraft.
author: Unikraft

branding:
  icon: package
  color: blue

inputs:
  #
  # Global flags
  #
  after:
    description: Bash script to run after the action
    required: false
    default: ""
  after_pack:
    description: Script to execute after the packaging step of the action
    required: false
    default: ""
  auths:
    description: Authentication details for services, must be in YAML format
    required: false
  before:
    description: Bash script to run before the action
    required: false
    default: ""
  loglevel:
    description: Log-level of the action
    required: false
    default: error
  runtimedir:
    description: Path to store runtime artifacts
    required: false
    default: /github/workspace/.kraftkit/runtime

  #
  # Project flags
  #
  kraftfile:
    description: Alternative path for the Kraftfile or inline-Kraftfile.
    required: false
  workdir:
    description: Path to the project directory.
    required: false

  #
  # Build flags
  #
  arch:
    description: Architecture to build for.
    required: false
  plat:
    description: Platform to build for.
    required: false
  target:
    description: Name of the target to build for.
    required: false

  #
  # Running flags
  #
  execute:
    description: If to run the unikernel.
    required: false
    default: false
  timeout:
    description: Timeout for the unikernel.
    required: false

  #
  # Packaging flags
  #
  args:
    description: Arguments to pass to the unikernel.
    required: false
  memory:
    description: Set the memory size. String of format "1M"/"1G"/"1K"
    required: false
  name:
    description: Set the name of the output.
    required: true
  output:
    description: Set the output path.
    required: false
  push:
    description: Push the output to a registry.
    required: false
    default: false
  rootfs:
    description: Set the root filesystem.  This can be an existing CPIO archive or a directory.
    required: false
  strategy:
    description: Merge strategy to use when packaging.
    required: false
    default: merge

runs:
  # Use a composite type so we can set up BuildKit beforehand so that
  # `Dockerfile`s can be built as root filesystems.  Next, run KraftKit's GitHub
  # Action program via Docker which has been built as a container image so that
  # all the necessary dependencies for building, packaging and excuting the
  # unikernel are available.  Attach all known environmental variables and the
  # declared input variables to this action.  Finally, include the Docker
  # authentication config which may have been used prior via the
  # `docker/login-action` action, mount the buildkit socket, and mount
  # additional paths which are specific to the action including the workspace.
  using: composite
  steps:
  - name: Set up BuildKit
    shell: bash
    run: |
      docker run \
        --rm \
        -itd \
        --privileged \
        --name buildkitd_${GITHUB_RUN_ID} \
        -v /run/buildkit:/run/buildkit:rw \
        moby/buildkit:v0.12.1;
      sleep 5; # wait for buildkit to start
      sudo chmod 666 /run/buildkit/buildkitd.sock;
  - name: Set up scripts
    shell: bash
    run: |
      mkdir -p "${GITHUB_WORKSPACE}/.kraftkit"
      echo '#!/usr/bin/env bash' > "${GITHUB_WORKSPACE}/.kraftkit/before.sh"
      cat <<EOF >> "${GITHUB_WORKSPACE}/.kraftkit/before.sh"
      ${{ inputs.before }}
      EOF
      chmod +x "${GITHUB_WORKSPACE}/.kraftkit/before.sh"

      mkdir -p "${GITHUB_WORKSPACE}/.kraftkit"
      echo '#!/usr/bin/env bash' > "${GITHUB_WORKSPACE}/.kraftkit/after_pack.sh"
      cat <<EOF >> "${GITHUB_WORKSPACE}/.kraftkit/after_pack.sh"
      ${{ inputs.after_pack }}
      EOF
      chmod +x "${GITHUB_WORKSPACE}/.kraftkit/after_pack.sh"

      echo '#!/usr/bin/env bash' > "${GITHUB_WORKSPACE}/.kraftkit/after.sh"
      cat <<EOF >> "${GITHUB_WORKSPACE}/.kraftkit/after.sh"
      ${{ inputs.after }}
      EOF
      chmod +x "${GITHUB_WORKSPACE}/.kraftkit/after.sh"

  - name: Run kraft
    shell: bash
    run: |
      docker run \
        --workdir /github/workspace \
        --rm \
        --env-file <(env) \
        -e "CI=true" \
        -e "GITHUB_WORKSPACE=/github/workspace" \
        -e "INPUT_ARCH=${{ inputs.arch }}" \
        -e "INPUT_ARGS=${{ inputs.args }}" \
        -e "INPUT_AUTHS=${{ inputs.auths }}" \
        -e "INPUT_EXECUTE=${{ inputs.execute }}" \
        -e "INPUT_ROOTFS=${{ inputs.rootfs }}" \
        -e "INPUT_KRAFTFILE=${{ inputs.kraftfile }}" \
        -e "INPUT_LOGLEVEL=${{ inputs.loglevel }}" \
        -e "INPUT_MEMORY=${{ inputs.memory }}" \
        -e "INPUT_NAME=${{ inputs.name }}" \
        -e "INPUT_OUTPUT=${{ inputs.output }}" \
        -e "INPUT_PLAT=${{ inputs.plat }}" \
        -e "INPUT_STRATEGY=${{ inputs.strategy }}" \
        -e "INPUT_PUSH=${{ inputs.push }}" \
        -e "INPUT_RUNTIMEDIR=${{ inputs.runtimedir }}" \
        -e "INPUT_TARGET=${{ inputs.target }}" \
        -e "INPUT_TIMEOUT=${{ inputs.timeout }}" \
        -e "INPUT_WORKDIR=${{ inputs.workdir }}" \
        -v "${HOME}/.docker/config.json":"${HOME}/.docker/config.json" \
        -v "/run/buildkit/buildkitd.sock":"/run/buildkit/buildkitd.sock" \
        -v "/home/runner/work/_temp/_github_home":"/github/home" \
        -v "/home/runner/work/_temp/_github_workflow":"/github/workflow" \
        -v "/home/runner/work/_temp/_runner_file_commands":"/github/file_commands" \
        -v "${GITHUB_WORKSPACE}":"/github/workspace" \
        kraftkit.sh/github-action:v0
  - name: Stop BuildKit
    if: always()
    shell: bash
    run: docker stop buildkitd_${GITHUB_RUN_ID} || true
